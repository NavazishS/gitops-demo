pipeline {
  agent {
    docker {
      // registryUrl 'https://docker.io'
      // registryCredentialsId 'dockerhub-cred'
      image 'nawdocker/maven-agent:v1'
      // image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
      // args '-v $HOME/.m2:/root/.m2'
    }
  }
  stages {
  //  stage('Checkout') {
  //    steps {
  //      sh 'This step is needed only when your jenkins file is not placed in your GitRepo i.e either using webhook or Script configured using Jenkins console. But in our case we are placing jenkins file in Git repo. Hence, we are echo passeing this step without any actions'
  //    }
  //  }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.110.50.116:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "nawdocker/nawazrepo1:v1"
        // DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            echo 'step-1'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            echo 'step-2'
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            echo 'step-3'
            dockerImage.push()
            echo 'step-4'
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "gitops-demo"
            GIT_USER_NAME = "NavazishS"
        }
        steps {
            withCredentials([string(credentialsId: 'jenkins-github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "mailmenaw@gmail.com"
                    git config user.name "NawazishS"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s|image: abhishekf5/ultimate-cicd:[^[:space:]]*|image: abhishekf5/ultimate-cicd:'${BUILD_NUMBER}'|g" spring-boot-app-manifests/deployment.yml
                    git add spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
